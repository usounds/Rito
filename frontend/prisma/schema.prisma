generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Bookmark {
  uri             String          @id
  did             String
  subject         String
  ogp_title       String?
  ogp_description String?
  ogp_image       String?
  created_at      DateTime        @default(now()) @db.Timestamptz
  indexed_at      DateTime        @default(now()) @db.Timestamptz
  moderation_result String? 

  comments        Comment[]
  tags            BookmarkTag[]

  user UserDidHandle @relation(fields: [did], references: [did], name: "BookmarkUser")
  handle String? @map("handle") // 物理名 handle
}

model Post {
  uri               String   @id
  did               String
  text              String
  lang              String[]
  indexed_at        DateTime @default(now()) @db.Timestamptz
  moderation_result String?

  user   UserDidHandle @relation(fields: [did], references: [did], name: "PostUser")
  handle String?       @map("handle")

  uris   PostUri[]     @relation("PostUris") // 1対多
}

model PostUri {
  id     Int    @id @default(autoincrement())
  post   Post   @relation(fields: [postUri], references: [uri], name: "PostUris")
  postUri String
  uri    String

  @@index([postUri]) // 検索用インデックス
}

model UserDidHandle {
  did    String   @id
  handle String   @default("unknown")

  bookmarks Bookmark[] @relation("BookmarkUser")
  posts     Post[]     @relation("PostUser")
}

model Comment {
  id           Int      @id @default(autoincrement())
  bookmark_uri String                               // Bookmark.uri と対応
  lang         String
  title        String?
  comment      String?

  bookmark          Bookmark @relation(fields: [bookmark_uri], references: [uri], onDelete: Cascade)
  moderation_result String?  // "spam", "adult", "safe" など
  
  @@index([bookmark_uri])  // インデックス追加
  @@unique([bookmark_uri, lang], name: "bookmark_uri_lang") 
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  bookmarks BookmarkTag[]
}

model BookmarkTag {
  bookmark_uri String
  tag_id       Int

  bookmark Bookmark @relation(fields: [bookmark_uri], references: [uri], onDelete: Cascade)
  tag      Tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([bookmark_uri, tag_id])
  @@index([bookmark_uri])  // bookmark_uri 単独での検索を高速化
}

model JetstreamIndex {
  service String @id
  index   String   // bigint から string に変更

  @@map("jetstreamindex") // PostgreSQL のテーブル名
}

model Resolver {
  nsid     String
  did      String
  schema   String
  verified Boolean

  @@id([nsid, did])
  @@map("resolver") // PostgreSQL のテーブル名
}

model OAuthState {
  state         String   @id
  code_verifier String
  redirect_uri  String
  return_to     String?   // 任意で戻るページを保存できるように
  created_at    DateTime @default(now()) @db.Timestamptz

  @@map("OAuthState") // PostgreSQL 上のテーブル名を変更
}